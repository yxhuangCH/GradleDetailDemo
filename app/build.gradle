apply plugin: 'com.android.application'  // Android 依赖库

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "cash.juzhongke.com.gradledetaildemo"
        minSdkVersion 22
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        //  收到缩减 resConfigs 配置保留资源
        resConfigs "en", "cn", "da"    // 例如保留英语，中文，丹麦的字符串
        resConfigs "hdpi", "xhdpi", "xxhdpi"
        // 设置测试执行器
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file(KEY_STORE_FIELD)
//            keyAlias "Releasekey"
//            keyPassword   "password"
//            storePassword  "password"
        }

        debug {
//            storeFile file()
//            keyAlias
//            keyPassword
//            storePassword
        }

        staging.initWith(signingConfigs.release) // staging 和 release 版本一样的签名信息

        // 可以为特定的 flavor 签名
        xiaomi {
//            storeFile file()
//            keyAlias
//            keyPassword
//            storePassword
        }
    }

    // 构建类型
    buildTypes {
        release {
            minifyEnabled false  // 是否开启混淆
            shrinkResources false  // 自动缩减资源，需要同时与 minifyEnabled 开启
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'   // 混淆配置文件
            // 配置log，在 Release 版本中不打印，
            buildConfigField "boolean", "LOG_CALLS", "false";
            // 配置不同的 URL
            buildConfigField "String", "API_URL", "\"Http://example.com/api\""
            // 添加签名信息
            signingConfig signingConfigs.release
            // 指定渠道产品特定签名
//            productFlavors.xiaomi.signingConfig signingConfigs.xiaomi
        }

        debug {
            buildConfigField "boolean", "LOG_CALLS", "true";
            buildConfigField "String", "API_URL", "\"Http://texst.example.com/api\""
//            signingConfig signingConfigs.debug
            // 开启测试覆盖率
//            testCoverageEnabled = true
        }

        // 自定义构建类型(命令行可以 ./gradlew assembleStaging)
        staging {
            staging.initWith(buildTypes.debug) // 复制一个已经存在的构建类型所有属性，可以重写，例如下面的 API_URL
            applicationIdSuffix ".staging"  // 生成的 applicationId 变成 包名.staging, 这里是  cash.juzhongke.com.gradledetaildemo.staging
            versionNameSuffix "staging"
            buildConfigField "String", "API_URL", "\"Http://staging.example.com/api\""
            signingConfig signingConfigs.release
        }
    }

  //   不同渠道版本
    productFlavors {
        commonsoon {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "commonsoon"]

            // 可以自定义自己的 applicationId
            applicationId 'cash.juzhongke.com.gradledetaildemo.commonsoon'
            versionCode 3
            minSdkVersion 23
        }
        zhushou91 {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "zhushou91"]
        }
        market360 {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "market360"]
        }
        xiaomi {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
        }
        wandoujia {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
        }
    }

    // variant 过滤器，这里是忽略 xiaomi release 版本， 在 BuildVariants 中可以看到结果
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')){
            variant.getFlavors().each(){ flavor ->
                if (flavor.name.equals('xiaomi')){
                    variant.setIgnore(true);
                }
            }
        }
    }

    // 自动命名 apk
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def file = output.outputFile
            output.outputFile = new File(file.parent,
                file.name.replace(".apk", "-${variant.versionName}.apk"))
        }
    }

    // 构建时，剔除一下文件
    packagingOptions {
        exclude( 'LICENSE.txt')
    }


    // 禁止 lint , 默认是开启的
    lintOptions {
        abortOnError false
    }
}

// 定义一个任务来获取 Release Password
task getReleasePassword << {
    def keypassword = ''
    def storepassword = ''
    def keyalies = ''
    if (rootProject.file('private.properties').exists()){
        Properties properties = new Properties();
        properties.load(rootProject.file('private.properties').newDataInputStream())
        keypassword = properties.getProperty('release.password')
        storepassword = properties.getProperty('release.storepassword')
        keyalies = properties.getProperty('release.keyalies')

    }

    // 如果password 为空，private.properties 文件找不到，则询问控制台用户输入
    if (!keypassword?.trim()){
        keypassword = new String(System.console().readPassword("\nWhat's the secret password?"))
    }

    android.signingConfigs.release.keyPassword = keypassword
    android.signingConfigs.release.storePassword = storepassword
    android.signingConfigs.release.keyAlias = keyalies
}

// 运行时才添加，相当于 Hook
tasks.whenTaskAdded { theTask ->
    if (theTask.name.contains("Release")){
        theTask.dependsOn "getReleasePassword"
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])  // 本地依赖
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // 依赖项目
    compile project(':mylibrary')

    compile 'com.android.support:appcompat-v7:25.3.1'

    // 测试
    testCompile 'junit:junit:4.12'
    // 可以针对特定的 flavor 添加 Junit
//    testXiaomiCompile 'junit:junit:4.12'
}
